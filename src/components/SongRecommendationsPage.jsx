import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { searchPlaylist, findSongs } from '../utilities/SpotifyConnect'
import SongRow from './SongRow';
import "./SongRecommendationsPage.css";
import { getSeason, timeOfDay } from '../utilities/location';

const weatherTypeToIcon = {
  "sunny": "01d",
  "rainy": "09d",
  "cloudy": "03d",
  "snowy": "13d"
}

// const seasonToColor = {
//   "Winter": ,
//   "Spring": ,
//   "Summer": ,
//   "Fall": ,
// }

const SongRecommendationsPage = ({ weather, setWeather, weatherIcon, autoGeneratedWeather, city }) => {
  const [playlist, setPlaylist] = useState([]);
  const [songs, setSongs] = useState([]);
  const weatherIconUrl = `http://openweathermap.org/img/wn/${(!weatherIcon) ? weatherTypeToIcon[weather] : weatherIcon}@2x.png`;

  useEffect(() => {
    (async () => {
      const plays = await searchPlaylist(weather);
      setPlaylist(plays);

      const songdata = await findSongs(plays);
      setSongs(songdata);
    })();
  }, [])

  // const getColor = () => {
  //   const season = getSeason();
  //   season 
  // }

  return (songs.length === 0)
    ? <div>Loading Songsâ€¦</div>
    : (
      <>
        <div>
          <div className='upper-section'>
            <Link to="/" params={{ weather, setWeather }}>
              <input
                className="regenerate-songs-button"
                type="button"
                value={autoGeneratedWeather ? "Reload" : "Go Home"}
              />
            </Link>
            <div className="user-metadata">
              <h3>Recommended songs for a <b>{weather.toLowerCase()} {getSeason().toLowerCase()} {timeOfDay().toLowerCase()} {city !== "" ? `in ${city}` : ""}</b></h3>
              <img className="weather-icon" src={weatherIconUrl} />
            </div>
            <div className="playlist-link">
              <a target="_blank" href={playlist.external_urls.spotify}>View entire playlist</a>
            </div>
            {/* <hr className="line-divide" /> */}
          </div>
          <div className="songs-list">
            {songs.map((song, id) => (
              <SongRow
                key={id}
                songTitle={song.name}
                imageUrl={song.album.images[0].url}
                spotifyUrl={song.external_urls.spotify}
              />
            ))}
          </div>
        </div>
      </>
    )
};

export default SongRecommendationsPage;
