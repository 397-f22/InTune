import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { useState, useEffect } from 'react';
import Header from './components/Header';
import LandingPage from './components/LandingPage';
import SongRecommendationsPage from "./components/SongRecommendationsPage";
import { getLocationDetails } from "./utilities/Location";
import { getSeason, timeOfDay } from "./utilities/GetDateMetadata";
import { weatherDict, backgroundColorsBySeason, timeOfDayToOpacity } from "./utilities/Assets";
import './App.css';

const App = () => {
  const [weather, setWeather] = useState("");
  const [weatherIcon, setWeatherIcon] = useState("");
  const [autoGeneratedWeather, setAutoGeneratedWeather] = useState(false);
  const [city, setCity] = useState("");

  let [bottomBackgroundColor, topBackgroundColor] = backgroundColorsBySeason[getSeason()];
  const opacity = timeOfDayToOpacity[timeOfDay()];
  bottomBackgroundColor = `rgba(${bottomBackgroundColor}, ${opacity})`;
  topBackgroundColor = `rgba(${topBackgroundColor}, ${opacity})`;
  const styleStr = `linear-gradient(to top, ${bottomBackgroundColor}, ${topBackgroundColor})`;

  useEffect(() => {
    if (document.getElementById("loading-app-wrapper") !== null) {
      document.getElementById("loading-app-wrapper").style.backgroundImage = styleStr;
    };

    if (document.getElementById("standard-app-wrapper") !== null) {
      document.getElementById("standard-app-wrapper").style.backgroundImage = styleStr;
    };
  });

  // document.addEventListener('DOMContentLoaded', () => {
  //   document.getElementById("loading-app-wrapper").style.backgroundImage = styleStr;
  //   console.log("test")
  //   console.log(document.getElementById("standard-app-wrapper"));
  //   document.getElementById("standard-app-wrapper").style.backgroundImage = styleStr;
  // });

  useEffect(() => {
    (async () => {
      const weather = await getLocationDetails();
      if (Object.keys(weather).length === 0) {

        setWeather("Error"); // NOTE: Indicates lack of permissions (for location data), failed API call etc.
      } else {
        setCity(weather.name);
        let weatherName =  weather["weather"][0]["main"];
        if(Object.keys(weatherDict).includes(weatherName)){
          weatherName = weatherDict[weatherName];
        }
        setWeather(weatherName); // NOTE: Else, in success case, set to strong representing weather
        setWeatherIcon(weather["weather"][0]["icon"]);
        setAutoGeneratedWeather(true);
      };
    }) ();
  }, []);

    if (!weather) {
      return (
        <div id="loading-app-wrapper">Loading geolocation and weather data...</div>
      );
    } else {
      return (
        <div id="standard-app-wrapper">
          <Header />
          <BrowserRouter>
            <Routes>
              <Route path="/" element={
                                        (weather === "Error" || !autoGeneratedWeather)
                                        ? <LandingPage
                                            weather={weather}
                                            setWeather={setWeather}
                                            autoGeneratedWeather={autoGeneratedWeather}
                                          />
                                        : <Navigate to="/songs" />
                                      }
              />
              <Route
                path="/songs"
                element = {
                            (weather === "Error")
                            ? <Navigate to="/" />
                            : <SongRecommendationsPage
                                weather={weather}
                                setWeather={setWeather}
                                weatherIcon={weatherIcon}
                                autoGeneratedWeather={autoGeneratedWeather}
                                city={city}
                              />
                          }
              />
            </Routes>
          </BrowserRouter>
        </div>
      );
    };
};

export default App;
